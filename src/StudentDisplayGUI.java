
import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

/**
 * Main GUI to load and save XML files and display the information of the students
 * 
 * @author Thong Teav
 */
public class StudentDisplayGUI extends javax.swing.JFrame {
    //variables------------------------------------------------------------------------------------------------------------------
    private int width, height;
    private StudentInfoSet studentInfoSet;
    private DefaultListModel<String> listModel;
    private Document document;
    private static final String JAXP_SCHEMA_LANGUAGE = "http://java.sun.com/xml/jaxp/properties/schemaLanguage";
    private static final String W3C_XML_SCHEMA = "http://www.w3.org/2001/XMLSchema";
    //---------------------------------------------------------------------------------------------------------------------------
    
    //constructor----------------------------------------------------------------------------------------------------------------
    /**
     * Creates new form StudentDisplayGUI
     */
    public StudentDisplayGUI() {
        //get the screen size
        Toolkit kit = Toolkit.getDefaultToolkit();
        Dimension screenSize = kit.getScreenSize();
        width = screenSize.width * 4 / 5;
        height = screenSize.height * 4 / 5;
        
        studentInfoSet = new StudentInfoSet();//instantiate an empty student info set
        listModel = new DefaultListModel<>();//create a list model
        
        initComponents();//create the GUI components        
        this.setMinimumSize(new Dimension(width / 2, height / 2));//set minimum size so that the user can see the content all the time
        this.setLocationRelativeTo(null);//center the frame
    }
    //---------------------------------------------------------------------------------------------------------------------------
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        studentScrollPane = new javax.swing.JScrollPane();
        studentList = new javax.swing.JList<>();
        infoSplitPane = new javax.swing.JSplitPane();
        infoPanel = new javax.swing.JPanel();
        buttonPanel = new javax.swing.JPanel();
        getPapersBtn = new javax.swing.JButton();
        addPaperBtn = new javax.swing.JButton();
        loadImageBtn = new javax.swing.JButton();
        exitBtn = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        loadMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        addMenuItem = new javax.swing.JMenuItem();
        removeMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Student Information");
        setPreferredSize(new Dimension(width, height));

        splitPane.setResizeWeight(0.2);

        studentList.setModel(this.listModel);
        studentList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                studentListValueChanged(evt);
            }
        });
        studentScrollPane.setViewportView(studentList);

        splitPane.setLeftComponent(studentScrollPane);

        infoSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        infoSplitPane.setResizeWeight(0.8);

        javax.swing.GroupLayout infoPanelLayout = new javax.swing.GroupLayout(infoPanel);
        infoPanel.setLayout(infoPanelLayout);
        infoPanelLayout.setHorizontalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 876, Short.MAX_VALUE)
        );
        infoPanelLayout.setVerticalGroup(
            infoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 769, Short.MAX_VALUE)
        );

        infoSplitPane.setTopComponent(infoPanel);

        getPapersBtn.setText("Enrolled Papers");
        getPapersBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPapersBtnActionPerformed(evt);
            }
        });

        addPaperBtn.setText("Add Paper");
        addPaperBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPaperBtnActionPerformed(evt);
            }
        });

        loadImageBtn.setText("Load Image");
        loadImageBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImageBtnActionPerformed(evt);
            }
        });

        exitBtn.setText("Exit");
        exitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(getPapersBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(47, 47, 47)
                .addComponent(addPaperBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(47, 47, 47)
                .addComponent(loadImageBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(56, 56, 56)
                .addComponent(exitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(58, 58, 58))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getPapersBtn)
                    .addComponent(addPaperBtn)
                    .addComponent(loadImageBtn)
                    .addComponent(exitBtn))
                .addGap(29, 29, 29))
        );

        infoSplitPane.setRightComponent(buttonPanel);

        splitPane.setRightComponent(infoSplitPane);

        fileMenu.setText("File");

        loadMenuItem.setText("Load From XML");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(loadMenuItem);

        saveMenuItem.setText("Save To XML");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        menuBar.add(fileMenu);

        editMenu.setText("Edit");

        addMenuItem.setText("Add new student");
        addMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(addMenuItem);

        removeMenuItem.setText("Remove selected student");
        removeMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMenuItemActionPerformed(evt);
            }
        });
        editMenu.add(removeMenuItem);

        menuBar.add(editMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Opens a window for user to choose a file, create a dom from the file and create the student set and list from the xml file.
     * 
     * @param evt 
     */
    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed
        JFileChooser chooser = new JFileChooser(new File("."));//create a file chooser with the current folder
        int status = chooser.showOpenDialog(this);//display the file chooser
        if (status == JFileChooser.APPROVE_OPTION) {//if user has chosen a file
            File fileToOpen = chooser.getSelectedFile();
            FileInputStream fis = null;
            try {
                fis = new FileInputStream(fileToOpen);
                //build a DOM using the file
                DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
                builderFactory.setNamespaceAware(true);
                builderFactory.setValidating(true);
                builderFactory.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
                DocumentBuilder builder = builderFactory.newDocumentBuilder();
                document = builder.parse(fis);
                                
                studentInfoSet.clear();//empty the stduent info set map
                listModel.clear();//empty the list
                
                studentInfoSet.loadStudentsFromXML(document);//read the xml file and load the students into the map
                for (String studentID : studentInfoSet.getStudentKeys()) {
                    listModel.addElement(studentID);//get the student id from the set and add them to the display list
                }             
            } catch (FileNotFoundException ex) {
                System.out.println(ex.getMessage());
            } catch (SAXException ex) {
                System.out.println(ex.getMessage());
            } catch (IOException ex) {
                System.out.println(ex.getMessage());
            } catch (ParserConfigurationException ex) {
                System.out.println(ex.getMessage());
            }
        }
    }//GEN-LAST:event_loadMenuItemActionPerformed

    /**
     * Changes the display information panel to the current selected student in the list
     * 
     * @param evt 
     */
    private void studentListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_studentListValueChanged
        if (!evt.getValueIsAdjusting()) {
            if(!studentList.isSelectionEmpty()){//check if the student list is selected so that we won't get an exception
                infoSplitPane.setTopComponent(studentInfoSet.getStudent(studentList.getSelectedValue()).getStudentPanel());//display the student information of the selected student in the display list
            } else {
                infoSplitPane.setTopComponent(new JPanel());//set an empty panel when the list is empty or when nothing is selected        
            }
        }
    }//GEN-LAST:event_studentListValueChanged

    /**
     * Adds a new student with their ID from user input to the student set and display list.
     * 
     * @param evt 
     */
    private void addMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMenuItemActionPerformed
        String studentID = (String) JOptionPane.showInputDialog(this, "Please enter a student ID:", null);//create a pop up asking for student id
        if ((studentID != null) && (studentID.length() > 0)) {//when there is an input that is not null or empty
            if(studentID.matches("^[0-9]*$")){//verify input so that it only contain numbers
                studentInfoSet.addStudent(new StudentInfo(studentID));//create a new student info and add it to the set
                listModel.addElement(studentID);//add the student id to the display list
            } else {
                JOptionPane.showMessageDialog(this, "Student ID should only contain numbers.");
            }
        } else if (studentID == null){//check if input is null before empty to prevent exception
           //do nothing if student ID is null because cancel is pressed
        } else {//student id is empty
             JOptionPane.showMessageDialog(this, "Student ID cannot be empty.");//tell user it's empty
        }
    }//GEN-LAST:event_addMenuItemActionPerformed

    /**
     * Removes the selected student in the list from the set and the list
     * 
     * @param evt 
     */
    private void removeMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMenuItemActionPerformed
        if(!studentList.isSelectionEmpty()){//check if the list is selected to prevent exception
            studentInfoSet.removeStudent(studentList.getSelectedValue());//remove the student from the map using the selcted value as the key
            listModel.removeElement(studentList.getSelectedValue());//remove the student from the list
            //remove from the list after the student set to prevent error/exception
        }        
    }//GEN-LAST:event_removeMenuItemActionPerformed

    /**
     * Display the papers the selected student enrolls in
     * 
     * @param evt 
     */
    private void getPapersBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPapersBtnActionPerformed
        String papersString = "";
        if (!studentList.isSelectionEmpty()) {//if an item on the list is selected
            StudentInfo selectedStudent = studentInfoSet.getStudent(studentList.getSelectedValue());//get the student from the selected value of the list
            //loop through the papers the student enrolled in and concatenate  
           for (String paper : selectedStudent.getEnrolledPapers()) {
                papersString += "- " + paper + "\n";
            }
            if(!papersString.isEmpty()){//check if the string is not empty meaning student has enrolled papers
                JOptionPane.showMessageDialog(this, papersString, "Enrolled papers", JOptionPane.INFORMATION_MESSAGE);
            }else {//if no enrolled paper for the student
                JOptionPane.showMessageDialog(this, "Student has not yet enrolled in any paper.");
            }
        } else {//no selected value in the list
            JOptionPane.showMessageDialog(this, "No student is selected.");
        }        
    }//GEN-LAST:event_getPapersBtnActionPerformed

    /**
     * Adds a new paper from the user input to the selected student
     * 
     * @param evt 
     */
    private void addPaperBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPaperBtnActionPerformed
        if (!studentList.isSelectionEmpty()) {//check if a list item is selcted
            StudentInfo selectedStudent = studentInfoSet.getStudent(studentList.getSelectedValue());//get the student from the selected list value
            String paperName = (String) JOptionPane.showInputDialog(this, "Please enter a paper:", null);//get a student ID from user input
            if ((paperName != null) && (paperName.length() > 0)) {//if the input is not null or empty
                if (paperName.matches("^[A-Za-z0-9 &]*$")) {//verify input so that they are valid
                    selectedStudent.addPaper(paperName);//add the paper to the selected student
                } else {
                    JOptionPane.showMessageDialog(this, "Paper name should only contain alphanumeric characters and spaces.");
                }
            } else if (paperName == null){
                //do nothing because null paper name means user clicked cancel button
            } else{//empty input
                JOptionPane.showMessageDialog(this, "Paper name cannot be empty.");
            }
        } else {//no list item selected
            JOptionPane.showMessageDialog(this, "No student is selected.");
        }
    }//GEN-LAST:event_addPaperBtnActionPerformed

    /**
     * Confirms the user and exits the program if user desires
     * 
     * @param evt 
     */
    private void exitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBtnActionPerformed
        //confirms user if they want to exit
        int option = JOptionPane.showConfirmDialog(this,
                "Are you sure to exit the program?", "Exit?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (option == JOptionPane.YES_OPTION) {
            System.exit(0);
        }     
    }//GEN-LAST:event_exitBtnActionPerformed

    /**
     * Loads an image from a user-selected file and displays it in the student information panel
     * 
     * @param evt 
     */
    private void loadImageBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImageBtnActionPerformed
        if (!studentList.isSelectionEmpty()) {//if not selected list item
            StudentInfo selectedStudent = studentInfoSet.getStudent(studentList.getSelectedValue());//get the student from the selected value
            JFileChooser chooser = new JFileChooser(new File("."));//open a file chooser
            int status = chooser.showOpenDialog(this);
            if (status == JFileChooser.APPROVE_OPTION) {
                File fileToOpen = chooser.getSelectedFile();
                String pathToImage = fileToOpen.getAbsolutePath();
                selectedStudent.setPictureFromFileName(pathToImage);//set the picture path to the student
                infoSplitPane.setTopComponent(studentInfoSet.getStudent(studentList.getSelectedValue()).getStudentPanel());//reset the panel to display the image
            }
        } else {            
            JOptionPane.showMessageDialog(this, "No student is selected.");
        }
    }//GEN-LAST:event_loadImageBtnActionPerformed

    /**
     * Saves a XML file on the storage from a DOM document generated by the information in the student info set
     * 
     * @param evt 
     */
    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        //open a window to choose a file
        JFileChooser chooser = new JFileChooser(new File("."));
        int status = chooser.showSaveDialog(this);
        if (status == JFileChooser.APPROVE_OPTION){
            FileOutputStream fos = null;
            try {
                File fileToSave = chooser.getSelectedFile();//get the file
                String filePath = fileToSave.getAbsolutePath();//get the path
                fos = new FileOutputStream(fileToSave);//wrap the file with a file outputstream

                //build the DOM
                DocumentBuilderFactory builderFactory = DocumentBuilderFactory.newInstance();
                builderFactory.setNamespaceAware(true);
                builderFactory.setValidating(true);
                builderFactory.setAttribute(JAXP_SCHEMA_LANGUAGE, W3C_XML_SCHEMA);
                DocumentBuilder builder = builderFactory.newDocumentBuilder();
                document = builder.newDocument();//build a new document
                document.setXmlStandalone(true);
                
                //root element students
                Element rootElement = document.createElement("students");
                document.appendChild(rootElement);
                rootElement.setAttributeNS("http://www.w3.org/2001/XMLSchema-instance", "xsi:noNamespaceSchemaLocation", "students.xsd");
                
                //description
                if(studentInfoSet.getDescription() != null && !studentInfoSet.getDescription().isEmpty()){
                    Element desc = document.createElement("description");
                    rootElement.appendChild(desc);
                    desc.appendChild(document.createTextNode(studentInfoSet.getDescription()));
                }
                
                //parse the hashmap to the document
                Iterator<StudentInfo> studentIter = studentInfoSet.iterator();
                while(studentIter.hasNext()){
                    StudentInfo student = studentIter.next();
                    
                    //student
                    Element stud = document.createElement("student");
                    rootElement.appendChild(stud);
                    Attr attrID = document.createAttribute("studentID");
                    attrID.setValue(student.getStudentID());
                    Attr attrGender = document.createAttribute("gender");
                    attrGender.setValue(student.getGender() + "");
                    stud.setAttributeNode(attrID);
                    stud.setAttributeNode(attrGender);
                    
                    //firstname
                    Element fname = document.createElement("firstname");
                    stud.appendChild(fname);
                    fname.appendChild(document.createTextNode(student.getFirstName()));
                    
                    //lastname
                    Element lname = document.createElement("lastname");
                    stud.appendChild(lname);
                    lname.appendChild(document.createTextNode(student.getLastName()));
                    
                    //pictureURL
                    if(student.getPictureFileName() != null && !student.getPictureFileName().isEmpty()){
                        Element picURL = document.createElement("pictureURL");
                        stud.appendChild(picURL);
                        picURL.appendChild(document.createTextNode(student.getPictureFileName()));
                    }
                    
                    //birthday
                    String[] bdayString = student.getBirthDate().split("/");
                    Element bday = document.createElement("birthday");
                    stud.appendChild(bday);
                    Attr attrDay = document.createAttribute("day");
                    attrDay.setValue(bdayString[0]);
                    Attr attrMonth = document.createAttribute("month");
                    attrMonth.setValue(bdayString[1]);
                    Attr attrYear = document.createAttribute("year");
                    attrYear.setValue(bdayString[2]);
                    bday.setAttributeNode(attrDay);
                    bday.setAttributeNode(attrMonth);
                    bday.setAttributeNode(attrYear);
                    
                    //papers
                    for(String paper : student.getEnrolledPapers()){
                        Element pper = document.createElement("paper");
                        stud.appendChild(pper);
                        pper.appendChild(document.createTextNode(paper));
                    }
                }
                
                //transform the DOM into the file chosen by the user
                TransformerFactory transFactory = TransformerFactory.newInstance();
                Transformer transformer = transFactory.newTransformer();
                transformer.setOutputProperty(OutputKeys.ENCODING, "ISO-8859-1");
                transformer.setOutputProperty(OutputKeys.INDENT, "yes");
                transformer.setOutputProperty(OutputKeys.METHOD, "xml");
                transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "4");
                transformer.transform(new DOMSource(document), new StreamResult(fos));
                fos.flush();
                fos.close();                
            } catch (FileNotFoundException ex) {
                Logger.getLogger(StudentDisplayGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (TransformerException ex) {
                Logger.getLogger(StudentDisplayGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(StudentDisplayGUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ParserConfigurationException ex) {
                Logger.getLogger(StudentDisplayGUI.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            /* Set the Nimbus look and feel */
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(StudentDisplayGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(StudentDisplayGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(StudentDisplayGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(StudentDisplayGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentDisplayGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem addMenuItem;
    private javax.swing.JButton addPaperBtn;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton exitBtn;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton getPapersBtn;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JSplitPane infoSplitPane;
    private javax.swing.JButton loadImageBtn;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem removeMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JList<String> studentList;
    private javax.swing.JScrollPane studentScrollPane;
    // End of variables declaration//GEN-END:variables
}
